{%extends "FrontendBundle:Frontend:home.html.twig"%}

{% block content %}
{%if error%}
<div class="row-fluid">
    <div class="alert alert-error">
    <button data-dismiss="alert" class="close"></button>
    {{error}}
    </div>
</div>
{%endif%}
<div class="container centercontainer">
<div class="row-fluid">
<div class="span6 box txt_box">
    <ul id="tab" class="nav nav-tabs">
            <li class="active"><a href="#home" data-toggle="tab">Datos de usuario</a></li>
            <li><a href="#profile" data-toggle="tab">Confirmar el pago</a></li>            
            <li class="pull-right selection"><h4 class="title">Haz seleccionado el tipo de usuario "{{type}}"
                {%if type == 'basic'%}
                     FREE 
                {%endif%}
                {%if type == 'plus' %}
                    $ 9.00
                {%endif%}
                {%if type == 'premiun' %}
                    $ 39.00
                {%endif%}
                </h4></li>            
          </ul>
    <form role="form" class="form form-horizontal bootstrap-validator-form" id="register_form" action="{{path('customer_create')}}" method='POST' {{ form_enctype(form) }}>
          <div id="myTabContent" class="tab-content">
            <div class="tab-pane fade in active" id="home">
              <fieldset>
    <legend>Datos del usuario</legend>
    <div class="col-md-7 margin-left-30">  
        <div class="form-group">                
      <label class="col-sm-4 control-label"  for="textinput">{{ form_label(form.name) }}</label>
      <div class="col-sm-6">
          {{ form_widget(form.name) }}
      </div>
    </div>
        <div class="form-group">                
      <label class="col-sm-4 control-label"  for="textinput">{{ form_label(form.email) }}</label>
      <div class="col-sm-6">
          {{ form_widget(form.email) }}
      </div>
    </div>
        <div class="form-group">                
      <label class="col-sm-4 control-label"  for="textinput">{{ form_label(form.password) }}</label>
      <div class="col-sm-6">
          {{ form_widget(form.password) }}
      </div>
    </div>
    
    </div>
              </fieldset>
             <hr>
        <div class="text-center">
            <a id="nextregister" class="btn btn-info"> Siguiente </a>
        </div>
        
       
   
            </div>
            <div class="tab-pane fade" id="profile">
              <fieldset>
    <legend>Datos de su tarjeta</legend>
    
    <!-- Card Holder Name -->
    <div class="form-group">
      <label class="col-sm-4 control-label"  for="textinput">Titular de la tarjeta</label>
      <div class="col-sm-6">
        <input type="text" name="cardholdername" maxlength="70" placeholder="Titular de la tarjeta" class="card-holder-name form-control">
      </div>
    </div>
    
    <!-- Card Number -->
    <div class="form-group">
      <label class="col-sm-4 control-label" for="textinput">N&uacute;mero de la tarjeta</label>
      <div class="col-sm-6">
        <input type="text" id="cardnumber" maxlength="19" placeholder="N&uacute;mero de la tarjeta" class="card-number form-control">
      </div>
    </div>
    
    <!-- Expiry-->
    <div class="form-group">
      <label class="col-sm-4 control-label" for="textinput">Fecha de caducidad</label>
      <div class="col-sm-6">
        <div class="form-inline">
          <select name="select2" data-stripe="exp-month" class="card-expiry-month stripe-sensitive required form-control">
            <option value="01" selected="selected">01</option>
            <option value="02">02</option>
            <option value="03">03</option>
            <option value="04">04</option>
            <option value="05">05</option>
            <option value="06">06</option>
            <option value="07">07</option>
            <option value="08">08</option>
            <option value="09">09</option>
            <option value="10">10</option>
            <option value="11">11</option>
            <option value="12">12</option>
          </select>
          <span> / </span>
          <select name="select2" data-stripe="exp-year" class="card-expiry-year stripe-sensitive required form-control">
          </select>
          
        </div>
      </div>
    </div>
    
    <!-- CVV -->
    <div class="form-group">
      <label class="col-sm-4 control-label" for="textinput">CVV/CVV2</label>
      <div class="col-sm-3">
        <input type="text" id="cvv" placeholder="CVV" maxlength="4" class="card-cvc form-control">
      </div>
    </div>
    
    <!-- Important notice -->
    <div class="form-group">
    <div class="panel panel-success">
      <div class="panel-heading">
        <h3 class="panel-title">Aviso importante</h3>
      </div>
      <div class="panel-body">
        <p>Al registrarse en nuestro sitio usted est&aacute; de acuerdo con nuestros T&eacute;rminos y Condiciones.</p>
        
      </div>
    </div>
    
    <!-- Submit -->
    <div class="text-center">
        <a id="backregister" class="btn btn-info"> Atr&aacute;s </a>
        <button type="submit" class="btn btn-success"> Aceptar </button>
        </div>
  </fieldset>
               <hr>
        
            </div> 
            
          </div>
         </form>
    
    
    
</div>


</div>
</div>
{%endblock content%}
{%block inline_script%}
<script type="text/javascript" src="https://js.stripe.com/v2/"></script>
<script type="text/javascript" src="{{asset('vendor/bootstrap-formhelpers-min.js')}}"></script>
<script type="text/javascript" src="{{asset('vendor/bootstrapValidator-min.js')}}"></script>
<script type="text/javascript">
$(document).ready(function() {
    $('#register_form').bootstrapValidator({
        message: 'Este valor no es válido',
        feedbackIcons: {
            valid: 'glyphicon glyphicon-ok',
            invalid: 'glyphicon glyphicon-remove',
            validating: 'glyphicon glyphicon-refresh'
        },
		submitHandler: function(validator, form, submitButton) {
                    var chargeAmount = 3000; //amount you want to charge, in cents. 1000 = $10.00, 2000 = $20.00 ...
                    // createToken returns immediately - the supplied callback submits the form if there are no errors
                    Stripe.createToken({
                        number: $('.card-number').val(),
                        cvc: $('.card-cvc').val(),
                        exp_month: $('.card-expiry-month').val(),
                        exp_year: $('.card-expiry-year').val(),
						name: $('.card-holder-name').val(),
						address_line1: $('.address').val(),
						address_city: $('.city').val(),
						address_zip: $('.zip').val(),
						address_state: $('.state').val(),
						address_country: $('.country').val()
                    }, chargeAmount, stripeResponseHandler);
                    return false; // submit from callback
        },
        fields: {
            street: {
                validators: {
                    notEmpty: {
                        message: 'The street is required and cannot be empty'
                    },
					stringLength: {
                        min: 6,
                        max: 96,
                        message: 'The street must be more than 6 and less than 96 characters long'
                    }
                }
            },
            city: {
                validators: {
                    notEmpty: {
                        message: 'The city is required and cannot be empty'
                    }
                }
            },
			zip: {
                validators: {
                    notEmpty: {
                        message: 'The zip is required and cannot be empty'
                    },
					stringLength: {
                        min: 3,
                        max: 9,
                        message: 'The zip must be more than 3 and less than 9 characters long'
                    }
                }
            },
            email: {
                validators: {
                    notEmpty: {
                        message: 'Se requiere que la dirección de correo electrónico'
                    },
                    emailAddress: {
                        message: 'La entrada no es una dirección válida de correo electrónico'
                    },
					stringLength: {
                        min: 6,
                        max: 65,
                        message: 'El correo electrónico debe ser más de 6 y menos de 65 caracteres de longitud'
                    }
                }
            },
			cardholdername: {
                validators: {
                    notEmpty: {
                        message: 'Se requiere el nombre del titular de la tarjeta'
                    },
					stringLength: {
                        min: 6,
                        max: 70,
                        message: 'El nombre del titular de la tarjeta debe ser mayor de 6 y menos de 70 caracteres de longitud'
                    }
                }
            },
			cardnumber: {
		selector: '#cardnumber',
                validators: {
                    notEmpty: {
                        message: 'Se requiere el número de tarjeta de crédito'
                    },
					creditCard: {
						message: 'El número de tarjeta de crédito no es válido'
					},
                }
            },
			prodi_ecomercebundle_customertype_name: {
		selector: '#prodi_ecomercebundle_customertype_name',
                validators: {
                    notEmpty: {
                        message: 'Se requiere Nombre y Apellidos'
                    },
					stringLength: {
                        min: 6,
                        max: 70,
                        message: 'El Nombre y Apellidos debe ser mayor de 6 y menos de 70 caracteres de longitud'
                    }
                }
            },
			expMonth: {
                selector: '[data-stripe="exp-month"]',
                validators: {
                    notEmpty: {
                        message: 'Se requiere el mes de vencimiento'
                    },
                    digits: {
                        message: 'El mes de vencimiento sólo puede contener dígitos'
                    },
                    callback: {
                        message: 'Caducado',
                        callback: function(value, validator) {
                            value = parseInt(value, 10);
                            var year         = validator.getFieldElements('expYear').val(),
                                currentMonth = new Date().getMonth() + 1,
                                currentYear  = new Date().getFullYear();
                            if (value < 0 || value > 12) {
                                return false;
                            }
                            if (year == '') {
                                return true;
                            }
                            year = parseInt(year, 10);
                            if (year > currentYear || (year == currentYear && value > currentMonth)) {
                                validator.updateStatus('expYear', 'VALID');
                                return true;
                            } else {
                                return false;
                            }
                        }
                    }
                }
            },
            expYear: {
                selector: '[data-stripe="exp-year"]',
                validators: {
                    notEmpty: {
                        message: 'The expiration year is required'
                    },
                    digits: {
                        message: 'The expiration year can contain digits only'
                    },
                    callback: {
                        message: 'Expired',
                        callback: function(value, validator) {
                            value = parseInt(value, 10);
                            var month        = validator.getFieldElements('expMonth').val(),
                                currentMonth = new Date().getMonth() + 1,
                                currentYear  = new Date().getFullYear();
                            if (value < currentYear || value > currentYear + 100) {
                                return false;
                            }
                            if (month == '') {
                                return false;
                            }
                            month = parseInt(month, 10);
                            if (value > currentYear || (value == currentYear && month > currentMonth)) {
                                validator.updateStatus('expMonth', 'VALID');
                                return true;
                            } else {
                                return false;
                            }
                        }
                    }
                }
            },
			cvv: {
		selector: '#cvv',
                validators: {
                    notEmpty: {
                        message: 'Se requiere el CVV'
                    },
					cvv: {
                        message: 'El CVV no es un valor válido ',
                        creditCardField: 'cardnumber'
                    }
                }
            },
        }
    });
});
</script>
<script type="text/javascript">
            // this identifies your website in the createToken call below
            Stripe.setPublishableKey('pk_test_4Nt2IlmIvSgymqOlbkSKqNbp');
 
            function stripeResponseHandler(status, response) {
                if (response.error) {
                    // re-enable the submit button
                    $('.submit-button').removeAttr("disabled");
					// show hidden div
					document.getElementById('a_x200').style.display = 'block';
                    // show the errors on the form
                    $(".payment-errors").html(response.error.message);
                } else {
                    var form$ = $("#register_form");
                    // token contains id, last4, and card type
                    var token = response['id'];
                    // insert the token into the form so it gets submitted to the server
                    form$.append("<input type='hidden' name='stripeToken' value='" + token + "' />");
                    // and submit
                    form$.get(0).submit();
                }
            }
 

</script>

<script type="text/javascript">
            var select = $(".card-expiry-year"),
            year = new Date().getFullYear();
 
            for (var i = 0; i < 12; i++) {
                select.append($("<option value='"+(i + year)+"' "+(i === 0 ? "selected" : "")+">"+(i + year)+"</option>"))
            }
        </script> 
{%endblock inline_script%}
